Index: src/components/ui/carousel.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n        scrollTo,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n        const Scr = React.useCallback(() => {\n          api?.scrollNext()\n        }, [scrollTo])\n\n      console.log(\"scrollTo\",scrollTo)\n\n      React.useEffect(() => {\n\n          api?.scrollTo(scrollTo)\n      }, [scrollTo])\n      const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/carousel.tsx b/src/components/ui/carousel.tsx
--- a/src/components/ui/carousel.tsx	(revision 048a470aff122d7dd9ccd50a31f1385d877885cc)
+++ b/src/components/ui/carousel.tsx	(date 1739694405205)
@@ -90,8 +90,6 @@
           api?.scrollNext()
         }, [scrollTo])
 
-      console.log("scrollTo",scrollTo)
-
       React.useEffect(() => {
 
           api?.scrollTo(scrollTo)
Index: src/components/product-details.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\n\nimport Image from \"next/image\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Product } from \"@/types/product\";\nimport { useState } from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectGroup, SelectIcon,\n  SelectItem, SelectLabel, SelectPortal, SelectScrollDownButton, SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue, SelectViewport, Root, SelectItemText\n} from \"@radix-ui/react-select\";\nimport {ChevronDownIcon, ChevronUpIcon} from \"lucide-react\";\nimport \"./styles.css\";\n\ninterface ProductDetailsProps {\n  product: Product;\n}\n\nexport const ProductDetails = ({ product }: ProductDetailsProps) => {\n  const structuredData = new Map();\n  const sizeSet = new Map(); // Stores size name -> sizeId\n  const colorSet = new Map(); // Stores color name -> colorId\n\n  product.variants.forEach((item) => {\n    const [size, color] = item.name.split(\" - \");\n    const [sizeId, colorId] = item.variantOptionIds;\n\n    // Store unique sizes\n    if (!sizeSet.has(size)) {\n      sizeSet.set(size, sizeId);\n    }\n\n    // Store unique colors\n    if (!colorSet.has(color)) {\n      colorSet.set(color, colorId);\n    }\n\n    if (!structuredData.has(sizeId)) {\n      structuredData.set(sizeId, new Map());\n    }\n\n\n    structuredData.get(sizeId).set(colorId, {\n      outOfStock: item.outOfStock || false,\n      price: item.price,\n      imageIndex: item.imageIndex,\n    });\n  });\n\n  const [selectedSize, setSelectedSize] = useState(\tsizeSet.values().next().value);\n  const [selectedColor, setSelectedColor] = useState(\tcolorSet.values().next().value);\n\n\n  console.log(\"selectedSize\",selectedSize)\n  console.log(\"selectedColor\",selectedColor)\n  console.log(\"structuredData.get(selectedSize)?.get(selectedColor)?\",structuredData);\n\n\n  const handleValueChange = (value: any) => {\n    setSelectedColor(Number(value));\n  };\n\n  const resetSelection = () => {\n    //setSelectedValue('');\n  }\n  console.log(\"selectedColor\",selectedColor)\n  return (\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <Carousel  scrollTo={structuredData.get(selectedSize)?.get(selectedColor)?.imageIndex} className=\"w-[800px] mr-16\">\n          <CarouselContent>\n            {product.images.map((image) => (\n                <CarouselItem key={image.url}>\n                  <Image src={image.url} alt={image.alt} width={500} height={500} />\n                </CarouselItem>\n            ))}\n          </CarouselContent>\n          <CarouselPrevious />\n          <CarouselNext />\n        </Carousel>\n\n        <div>\n          <h1 className=\"text-2xl font-semibold text-[#282828]\">\n            {product.title}\n          </h1>\n          <div className=\"flex items-center mt-2 mb-4\">\n            <span className=\"text-yellow-500\">★</span>\n            <span className=\"ml-1 text-[#282828]\">\n            {product.rating.value} ({product.rating.count})\n          </span>\n          </div>\n          <p className=\"text-gray-600\">{product.description}</p>\n          <p className=\"text-4xl font-bold tracking-tighter text-[#f04a1c] mt-4\">\n            ${product.price}\n          </p>\n\n\n\n\n\n          <Root value={selectedColor}  onValueChange={handleValueChange}>\n            <SelectTrigger className=\"SelectTrigger\" aria-label=\"Food\">\n              <SelectValue placeholder=\"Select a fruit…\" />\n              <SelectIcon className=\"SelectIcon\">\n                <ChevronDownIcon />\n              </SelectIcon>\n            </SelectTrigger>\n              <SelectContent className=\"SelectContent\">\n                <SelectScrollUpButton className=\"SelectScrollButton\">\n                  <ChevronUpIcon />\n                </SelectScrollUpButton>\n                <SelectViewport className=\"SelectViewport\">\n                  <SelectGroup>\n                    {[...colorSet.entries()].map(([color, colorId]) => (\n                        <SelectItem key={colorId} value={colorId.toString()}>\n                          {color}\n                        </SelectItem>\n                    ))}\n                  </SelectGroup>\n\n\n                </SelectViewport>\n                <SelectScrollDownButton className=\"SelectScrollButton\">\n                  <ChevronDownIcon />\n                </SelectScrollDownButton>\n              </SelectContent>\n          </Root>\n\n          <label>Size: </label>\n          <select\n              value={selectedSize}\n              onChange={(e) => setSelectedSize(Number(e.target.value))}\n\n          >\n\n          </select>\n\n\n          <p>Price: ${structuredData.get(selectedSize)?.get(selectedColor)?.price}</p>\n          <p>Out of Stock: {structuredData.get(selectedSize)?.get(selectedColor)?.outOfStock ? \"Yes\" : \"No\"}</p>\n          <p>Image Index: {structuredData.get(selectedSize)?.get(selectedColor)?.imageIndex}</p>\n\n          <Button className=\"mt-4 font-semibold\" size=\"lg\">\n            Add to cart\n          </Button>\n        </div>\n      </div>\n  );\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/product-details.tsx b/src/components/product-details.tsx
--- a/src/components/product-details.tsx	(revision 048a470aff122d7dd9ccd50a31f1385d877885cc)
+++ b/src/components/product-details.tsx	(date 1739694647124)
@@ -62,19 +62,16 @@
   const [selectedColor, setSelectedColor] = useState(	colorSet.values().next().value);
 
 
-  console.log("selectedSize",selectedSize)
-  console.log("selectedColor",selectedColor)
-  console.log("structuredData.get(selectedSize)?.get(selectedColor)?",structuredData);
-
 
   const handleValueChange = (value: any) => {
-    setSelectedColor(Number(value));
+    setSelectedColor(value);
   };
 
   const resetSelection = () => {
     //setSelectedValue('');
   }
-  console.log("selectedColor",selectedColor)
+  console.log("selectedColor",selectedColor.toString())
+  console.log("structuredData",structuredData)
   return (
       <div className="flex flex-col md:flex-row gap-4">
         <Carousel  scrollTo={structuredData.get(selectedSize)?.get(selectedColor)?.imageIndex} className="w-[800px] mr-16">
@@ -108,7 +105,7 @@
 
 
 
-          <Root value={selectedColor}  onValueChange={handleValueChange}>
+          <Root value={"504"}  onValueChange={handleValueChange}>
             <SelectTrigger className="SelectTrigger" aria-label="Food">
               <SelectValue placeholder="Select a fruit…" />
               <SelectIcon className="SelectIcon">
@@ -121,6 +118,9 @@
                 </SelectScrollUpButton>
                 <SelectViewport className="SelectViewport">
                   <SelectGroup>
+                    <SelectItem value={"504"}>
+                      "504"
+                    </SelectItem>
                     {[...colorSet.entries()].map(([color, colorId]) => (
                         <SelectItem key={colorId} value={colorId.toString()}>
                           {color}
